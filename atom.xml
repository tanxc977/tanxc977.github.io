<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>木枫的博客</title>
  
  <subtitle>记录技术的点点滴滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-11T13:42:26.667Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>mufeng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Jupyternotebook改变默认的的工作目录</title>
    <link href="http://yoursite.com/2018/12/11/Jupyternotebook%E6%94%B9%E5%8F%98%E9%BB%98%E8%AE%A4%E7%9A%84%E7%9A%84%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%95/"/>
    <id>http://yoursite.com/2018/12/11/Jupyternotebook改变默认的的工作目录/</id>
    <published>2018-12-11T13:31:38.000Z</published>
    <updated>2018-12-11T13:42:26.667Z</updated>
    
    <content type="html"><![CDATA[<p>默认的“notebook工作文件夹”一般在 user/xx/ 下，如何修改你的“notebook工作文件夹”呢？</p><h6 id="1）在Anaconda-Prompt终端中输入下面命令，查看你的notebook配置文件在哪里："><a href="#1）在Anaconda-Prompt终端中输入下面命令，查看你的notebook配置文件在哪里：" class="headerlink" title="1）在Anaconda Prompt终端中输入下面命令，查看你的notebook配置文件在哪里："></a>1）在Anaconda Prompt终端中输入下面命令，查看你的notebook配置文件在哪里：</h6><blockquote><p><code>jupyter notebook --generate-config</code></p></blockquote><p>根据你运行实际显示的路径，打开这个配置文件（可以用notepad++软件打开各种格式的文件），我电脑上是这个文件<code>C:\Users\用户\.jupyter\jupyter_notebook_config.py</code></p><h6 id="2）notepad-打开jupyter-notebook-config-py，搜索关键词：c-NotebookApp-notebook-dir"><a href="#2）notepad-打开jupyter-notebook-config-py，搜索关键词：c-NotebookApp-notebook-dir" class="headerlink" title="2）notepad 打开jupyter_notebook_config.py，搜索关键词：c.NotebookApp.notebook_dir"></a>2）notepad 打开jupyter_notebook_config.py，搜索关键词：c.NotebookApp.notebook_dir</h6><p>将c.NotebookApp.notebook_dir前的注释打开，写成</p><blockquote><p><code>c.NotebookApp.notebook_dir=&#39;d:\workspace\ipython_workspace&#39;</code></p></blockquote><p><strong>‘d:\workspace\ipython_workspace’</strong> 为你想指定的目录 </p><h6 id="3）然后重启notebook服务器就可以了"><a href="#3）然后重启notebook服务器就可以了" class="headerlink" title="3）然后重启notebook服务器就可以了"></a>3）然后重启notebook服务器就可以了</h6><p>或者 打开jupyter notebook</p><p>输入： jupyter notebook 目录地址 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;默认的“notebook工作文件夹”一般在 user/xx/ 下，如何修改你的“notebook工作文件夹”呢？&lt;/p&gt;
&lt;h6 id=&quot;1）在Anaconda-Prompt终端中输入下面命令，查看你的notebook配置文件在哪里：&quot;&gt;&lt;a href=&quot;#1）在Anaco
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>win10下JupyterNotebook报错</title>
    <link href="http://yoursite.com/2018/12/11/win10%E4%B8%8BJupyterNotebook%E6%8A%A5%E9%94%99/"/>
    <id>http://yoursite.com/2018/12/11/win10下JupyterNotebook报错/</id>
    <published>2018-12-11T13:25:26.000Z</published>
    <updated>2018-12-11T13:30:40.966Z</updated>
    
    <content type="html"><![CDATA[<p>win10下安装Anaconda3 对应python版本为python3.7 ，安装好以后发现，通过UI界面运行Jupyter Notebook是可以的，但是通过命令行运行jupyter notebook 就一直报错，报错信息如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(C:\Users\xx\Anaconda3) C:\Users\xx&gt;jupyter notebook</span><br><span class="line">_cffi_ext.c</span><br><span class="line">AppData\Roaming\Python\Python37\site-packages\zmq\backend\cffi\__pycache__\_cffi_ext.c(209): fatal error C1083: Cannot open include file: 'sys/un.h': No such file or directory</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "C:\Users\Myaxxmoto\Anaconda3\Scripts\jupyter-notebook-script.py", line 3, in &lt;module&gt;</span><br><span class="line">    import notebook.notebookapp</span><br><span class="line">  File "C:\Users\xx\Anaconda3\lib\site-packages\notebook\notebookapp.py", line 31, in &lt;module&gt;</span><br><span class="line">    from zmq.eventloop import ioloop</span><br><span class="line">  File "C:\Users\xx\AppData\Roaming\Python\Python37\site-packages\zmq\__init__.py", line 34, in &lt;module&gt;</span><br><span class="line">    from zmq import backend</span><br><span class="line">  File "C:\Users\xx\AppData\Roaming\Python\Python37\site-packages\zmq\backend\__init__.py", line 40, in &lt;module&gt;</span><br><span class="line">    reraise(*exc_info)</span><br><span class="line">  File "C:\Users\xx\AppData\Roaming\Python\Python37\site-packages\zmq\utils\sixcerpt.py", line 34, in reraise</span><br><span class="line">    raise value</span><br><span class="line">  File "C:\Users\xx\AppData\Roaming\Python\Python37\site-packages\zmq\backend\__init__.py", line 27, in &lt;module&gt;</span><br><span class="line">    _ns = select_backend(first)</span><br><span class="line">  File "C:\Users\xx\AppData\Roaming\Python\Python37\site-packages\zmq\backend\select.py", line 26, in select_backend</span><br><span class="line">    mod = __import__(name, fromlist=public_api)</span><br><span class="line">  File "C:\Users\xx\AppData\Roaming\Python\Python37\site-packages\zmq\backend\cython\__init__.py", line 6, in &lt;module&gt;</span><br><span class="line">    from . import (constants, error, message, context,</span><br><span class="line">ImportError: cannot import name 'constants'</span><br></pre></td></tr></table></figure><p>困扰了几天，最后查到可以用如下方式处理：</p><p><code>pip uninstall pyzmq</code></p><p>然后：</p><p><code>pip install pyzmq</code></p><p>即可解决问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;win10下安装Anaconda3 对应python版本为python3.7 ，安装好以后发现，通过UI界面运行Jupyter Notebook是可以的，但是通过命令行运行jupyter notebook 就一直报错，报错信息如下：&lt;/p&gt;
&lt;figure class=&quot;h
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库设计规范</title>
    <link href="http://yoursite.com/2018/12/10/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2018/12/10/MySQL数据库设计规范/</id>
    <published>2018-12-10T13:14:52.000Z</published>
    <updated>2018-12-10T13:33:05.258Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>规范背景与目的</p></blockquote><p>MySQL数据库与oracle、sqlserver等数据库相比，有其内核上的优势与劣势。我们在使用MySQL数据库的时候需要遵循一定规范，扬长避短。本规范旨在帮助或指导RD、QA、OP等技术人员做出适合线上业务的数据库设计。在数据库变更和处理流程、数据库表设计、SQL编写等方面予以规范，从而为公司业务系统稳定、健康地运行提供保障。</p><h1 id="设计规范"><a href="#设计规范" class="headerlink" title="设计规范"></a>设计规范</h1><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><p>以下所有规范会按照【高危】、【强制】、【建议】三个级别进行标注，遵守优先级从高到低。</p><p>对于不满足【高危】和【强制】两个级别的设计，DBA会强制打回要求修改。</p><h3 id="库名"><a href="#库名" class="headerlink" title="库名"></a>库名</h3><ol><li><p>【强制】库的名称必须控制在32个字符以内，相关模块的表名与表名之间尽量提现join的关系，如user表和user_login表。</p></li><li><p>【强制】库的名称格式：业务系统名称_子系统名，同一模块使用的表名尽量使用统一前缀。</p></li><li><p>【强制】一般分库名称命名格式是“库通配名_编号”，编号从“0”开始递增，比如“wenda_001”</p></li></ol><p>以时间进行分库的名称格式是“库通配名_时间” </p><ol start="4"><li>【强制】创建数据库时必须显式指定字符集，并且字符集只能是utf8或者utf8mb4</li></ol><p>创建数据库SQL举例：</p><p>Create database db1 default character set utf8;</p><h3 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h3><ol><li><p>【强制】表和列的名称必须控制在32个字符以内，表名只能使用字母、数字和下划线，一律小写。</p></li><li><p>【强制】表名要求模块名强相关，如师资系统采用”sz”作为前缀，渠道系统采用”qd”作为前缀等。</p></li><li><p>【强制】创建表时必须显式指定字符集为utf8或utf8mb4。</p></li><li><p>【强制】创建表时必须显式指定表存储引擎类型，如无特殊需求，一律为InnoDB。当需要使用除InnoDB/MyISAM/Memory以外的存储引擎时，必须通过DBA审核才能在生产环境中使用。</p></li></ol><blockquote><p>因为Innodb表支持事务、行锁、宕机恢复、MVCC等关系型数据库重要特性，为业界使用最多的MySQL存储引擎。而这是其他大多数存储引擎不具备的，因此首推InnoDB。</p></blockquote><ol start="4"><li><p>【强制】建表必须有comment</p></li><li><p>【建议】建表时关于主键：</p></li></ol><p>(1)强制要求主键为id，类型为int或bigint，且为auto_increment</p><p>(2)标识表里每一行主体的字段不要设为主键，建议设为其他字段如user_id，order_id等，并建立unique key索引（可参考cdb.teacher表设计）。</p><blockquote><p>因为如果设为主键且主键值为随机插入，则会导致innodb内部page分裂和大量随机I/O，性能下降。</p></blockquote><ol start="6"><li><p>【建议】核心表（如用户表，金钱相关的表）必须有行数据的创建时间字段create_time和最后更新时间字段update_time，便于查问题。</p></li><li><p>【建议】表中所有字段必须都是NOT NULL属性，业务可以根据需要定义DEFAULT值。</p></li><li><blockquote><p>因为使用NULL值会存在每一行都会占用额外存储空间、数据迁移容易出错、聚合函数计算结果偏差等问题。</p></blockquote></li><li><p>【建议】建议对表里的blob、text等大字段，垂直拆分到其他表里，仅在需要读这些对象的时候才去select。</p></li><li><p>【建议】反范式设计：把经常需要join查询的字段，在其他表里冗余一份。如user_name属性在user_account，user_login_log等表里冗余一份，减少join查询。</p></li><li><p>【强制】中间表用于保留中间结果集，名称必须以“tmp_”开头。备份表用于备份或抓取源表快照，名称必须以“bak_”开头。中间表和备份表定期清理。</p></li><li><p>【强制】对于超过100W行的大表进行alter table，必须经过DBA审核，并在业务低峰期执行。</p></li></ol><p>因为alter table会产生表锁，期间阻塞对于该表的所有写入，对于业务可能会产生极大影响。</p><h3 id="列数据类型优化"><a href="#列数据类型优化" class="headerlink" title="列数据类型优化"></a>列数据类型优化</h3><ol><li><p>【建议】表中的自增列（auto_increment属性），推荐使用bigint类型。因为无符号int存储范围为-2147483648~2147483647（大约21亿左右），溢出后会导致报错。</p></li><li><p>【建议】业务中选择性很少的状态status、类型type等字段推荐使用tinytint或者smallint类型节省存储空间。</p></li><li><p>【建议】业务中IP地址字段推荐使用int类型，不推荐用char(15)</p></li></ol><blockquote><p>因为int只占4字节，可以用如下函数相互转换，而char(15)占用至少15字节。一旦表数据行数到了1亿，那么要多用1.1G存储空间！</p></blockquote><p><code>SQL：select inet_aton(&#39;192.168.2.12&#39;); select inet_ntoa(3232236044);</code></p><p><code>Php: ip2long(‘192.168.2.12’); long2ip(3530427185);</code></p><ol start="4"><li>【建议】不推荐使用enum，set</li></ol><blockquote><p>因为它们浪费空间，且枚举值写死了，变更不方便。推荐使用tinyint或smallint</p></blockquote><ol start="5"><li>【建议】不推荐使用blob，text等类型</li></ol><blockquote><p>它们都比较浪费硬盘和内存空间。在加载表数据时，会读取大字段到内存里从而浪费内存空间，影响系统性能。建议和PM、RD沟通，是否真的需要这么大字段？</p></blockquote><blockquote><p>Innodb中当一行记录超过8098字节时，会将该记录中选取最长的一个字段将其768字节放在原始page里，该字段余下内容放在overflow-page里。不幸的是在compact行格式下，原始page和overflow-page都会加载。</p></blockquote><ol start="6"><li>【建议】存储金钱的字段，建议用int，程序端乘以100和除以100进行存取。</li></ol><blockquote><p>因为int占用4字节，而double占用8字节，空间浪费。</p></blockquote><ol start="7"><li>【建议】文本数据尽量用varchar存储</li></ol><blockquote><p>因为varchar是变长存储，比char更省空间。MySQL server层规定一行所有文本最多存65535字节，因此在utf8字符集下最多存21844个字符，超过会自动转换为mediumtext字段。而text在utf8字符集下最多存21844个字符，mediumtext最多存2^24/3个字符，longtext最多存2^32个字符。</p></blockquote><blockquote><p>一般建议用varchar类型，字符数不要超过2700</p></blockquote><ol start="8"><li>【建议】时间类型尽量选取timestamp</li></ol><blockquote><p>因为datetime占用8字节，timestamp仅占用4字节，但是范围为1970-01-01 00:00:01到2038-01-01 00:00:00。</p></blockquote><blockquote><p>更为高阶的方法，选用int来存储时间，使用SQL函数unix_timestamp()和from_unixtime()来进行转换。</p></blockquote><p>详细存储大小参加下图：</p><p>​                                              <img src="/2018/12/10/MySQL数据库设计规范/1.png" alt="1">      </p><h3 id="索引设计"><a href="#索引设计" class="headerlink" title="索引设计"></a>索引设计</h3><ol><li><p>【强制】InnoDB表必须主键为id int/bigint auto_increment,且主键值禁止被更新。</p></li><li><p>【建议】主键的名称以“pk_”开头，唯一键以“uk_”或“uq_”开头，普通索引以“idx_”开头，一律使用小写格式，以表名/字段的名称或缩写作为后缀。</p></li><li><p>【强制】InnoDB和MyISAM存储引擎表，索引类型必须为BTREE；MEMORY表可以根据需要选择HASH或者BTREE类型索引。</p></li><li><p>【强制】单个索引中每个索引记录的长度不能超过64KB</p></li><li><p>【建议】单个表上的索引个数不能超过7个</p></li><li><p>【建议】在建立索引时，多考虑建立联合索引，并把区分度最高的字段放在最前面。如列userid的区分度可由select count(distinct userid)计算出来。</p></li><li><p>【建议】在多表join的SQL里，保证被驱动表的连接列上有索引，这样join执行效率最高。</p></li><li><p>【建议】建表或加索引时，保证表里互相不存在冗余索引。</p></li></ol><p>对于MySQL来说，如果表里已经存在key(a,b)，则key(a)为冗余索引，需要删除。</p><h3 id="分库分表、分区表"><a href="#分库分表、分区表" class="headerlink" title="分库分表、分区表"></a>分库分表、分区表</h3><ol><li><p>【强制】分区表的分区字段（partition-key）必须有索引，或者是组合索引的首列。</p></li><li><p>【强制】单个分区表中的分区（包括子分区）个数不能超过1024。</p></li><li><p>【强制】上线前RD或者DBA必须指定分区表的创建、清理策略。</p></li><li><p>【强制】访问分区表的SQL必须包含分区键。</p></li><li><p>【建议】单个分区文件不超过2G，总大小不超过50G。建议总分区数不超过20个。</p></li><li><p>【强制】对于分区表执行alter table操作，必须在业务低峰期执行。</p></li><li><p>【强制】采用分库策略的，库的数量不能超过1024</p></li><li><p>【强制】采用分表策略的，表的数量不能超过4096</p></li><li><p>【建议】单个分表不超过500W行，ibd文件大小不超过2G，这样才能让数据分布式变得性能更佳。</p></li><li><p>【建议】水平分表尽量用取模方式，日志、报表类数据建议采用日期进行分表。</p></li></ol><h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><ol><li><p>【强制】数据库本身库、表、列所有字符集必须保持一致，为utf8或utf8mb4</p></li><li><p>【强制】前端程序字符集或者环境变量中的字符集，与数据库、表的字符集必须一致，统一为utf8</p></li></ol><h3 id="程序DAO层设计建议"><a href="#程序DAO层设计建议" class="headerlink" title="程序DAO层设计建议"></a>程序DAO层设计建议</h3><ol><li>【建议】新的代码不要用model，推荐使用手动拼SQL+绑定变量传入参数的方式。</li></ol><blockquote><p>因为model虽然可以使用面向对象的方式操作db，但是其使用不当很容易造成生成的SQL非常复杂，且model层自己做的强制类型转换性能较差，最终导致数据库性能下降。</p></blockquote><ol start="2"><li><p>【建议】前端程序连接MySQL或者redis，必须要有连接超时和失败重连机制，且失败重试必须有间隔时间。</p></li><li><p>【建议】前端程序报错里尽量能够提示MySQL或redis原生态的报错信息，便于排查错误。</p></li><li><p>【建议】对于有连接池的前端程序，必须根据业务需要配置初始、最小、最大连接数，超时时间以及连接回收机制，否则会耗尽数据库连接资源，造成线上事故。</p></li><li><p>【建议】对于log或history类型的表，随时间增长容易越来越大，因此上线前RD或者DBA必须建立表数据清理或归档方案。</p></li><li><p>【建议】 在应用程序设计阶段，RD必须考虑并规避数据库中主从延迟对于业务的影响。尽量避免从库短时延迟（20秒以内）对业务造成影响，建议强制一致性的读开启事务走主库，或更新后过一段时间再去读从库。</p></li><li><p>【建议】多个并发业务逻辑访问同一块数据（innodb表）时，会在数据库端产生行锁甚至表锁导致并发下降，因此建议更新类SQL尽量基于主键去更新。</p></li><li><p>【建议】业务逻辑之间加锁顺序尽量保持一致，否则会导致死锁。</p></li><li><p>【建议】对于单表读写比大于10:1的数据行或单个列，可以将热点数据放在缓存里（如mecache或redis），加快访问速度，降低MySQL压力。</p></li></ol><h3 id="一个规范的建表语句示例"><a href="#一个规范的建表语句示例" class="headerlink" title="一个规范的建表语句示例"></a>一个规范的建表语句示例</h3><p>一个较为规范的建表语句为：</p><p>CREATE TABLE user (</p><p>  <code>id</code> <strong>bigint</strong>(11) NOT NULL <strong>AUTO_INCREMENT</strong>,</p><p>  <code>user_id</code> bigint(11) NOT NULL COMMENT ‘用户id’</p><p>  <code>username</code> varchar(45) <strong>NOT NULL</strong> COMMENT ‘真实姓名’,</p><p>  <code>email</code> varchar(30) NOT NULL <strong>COMMENT</strong> ‘用户邮箱’,</p><p>  <code>nickname</code> varchar(45) NOT NULL COMMENT ‘昵称’,</p><p>  <code>avatar</code> int(11) NOT NULL COMMENT ‘头像’,</p><p>  <code>birthday</code> <strong>date</strong> NOT NULL COMMENT ‘生日’,</p><p>  <code>sex</code> <strong>tinyint(4)</strong> DEFAULT ‘0’ COMMENT ‘性别’,</p><p>  <code>short_introduce</code> <strong>varchar(150)</strong> DEFAULT NULL COMMENT ‘一句话介绍自己，最多50个汉字’,</p><p>  <code>user_resume</code> varchar(300) NOT NULL COMMENT ‘用户提交的简历存放地址’,</p><p>  <code>user_register_ip</code> <strong>int</strong> NOT NULL COMMENT ‘用户注册时的源ip’,</p><p>  <code>create_time</code> <strong>timestamp</strong> NOT NULL COMMENT ‘用户记录创建的时间’,</p><p>  <code>update_time</code> timestamp NOT NULL COMMENT ‘用户资料修改的时间’,</p><p>  <code>user_review_status</code> <strong>tinyint</strong> NOT NULL <strong>COMMENT ‘**</strong>用户资料审核状态，<strong><strong>1</strong></strong>为通过，<strong><strong>2</strong></strong>为审核中，<strong><strong>3</strong></strong>为未通过，<strong><strong>4</strong></strong>为还未提交审核<strong>**’,</strong></p><p>  <strong>PRIMARY KEY (<code>id</code>),</strong></p><p>  <strong>UNIQUE KEY <code>idx_user_id</code> (<code>user_id</code>)</strong>,</p><p>  KEY <code>idx_username</code>(<code>username</code>),</p><p>  <strong>KEY <code>idx_create_time</code></strong>(<code>create_time</code>,<code>user_review_status</code>)</p><p>) <strong>ENGINE=InnoDB</strong> DEFAULT CHARSET=<strong>utf8</strong> COMMENT=’网站用户基本信息’;</p><h2 id="SQL编写"><a href="#SQL编写" class="headerlink" title="SQL编写"></a>SQL编写</h2><h3 id="DML语句"><a href="#DML语句" class="headerlink" title="DML语句"></a>DML语句</h3><ol><li>【强制】SELECT语句必须指定具体字段名称，禁止写成“*”</li></ol><blockquote><p>因为select *会将不该读的数据也从MySQL里读出来，造成网卡压力。且表字段一旦更新，但model层没有来得及更新的话，系统会报错。</p></blockquote><ol start="2"><li><p>【强制】insert语句指定具体字段名称，不要写成insert into t1 values(…)，道理同上。</p></li><li><p>【建议】insert into…values(XX),(XX),(XX).. 这里XX的值不要超过5000个。</p></li></ol><p>值过多虽然上线很很快，但会引起主从同步延迟。</p><ol start="4"><li>【建议】SELECT语句不要使用UNION，推荐使用UNION ALL，并且UNION子句个数限制在5个以内。</li></ol><p>因为union all不需要去重，节省数据库资源，提高性能。</p><ol start="5"><li>【建议】in值列表限制在500以内。</li></ol><p>例如select… where userid in(….500个以内…)，这么做是为了减少底层扫描，减轻数据库压力从而加速查询。</p><ol start="6"><li><p>【建议】事务里批量更新数据需要控制数量，进行必要的sleep，做到少量多次。</p></li><li><p>【强制】事务涉及的表必须全部是innodb表。否则一旦失败不会全部回滚，且易造成主从库同步终端。</p></li><li><p>【强制】写入和事务发往主库，只读SQL发往从库。</p></li><li><p>【强制】除静态表或小表（100行以内），DML语句必须有where条件，且使用索引查找。</p></li><li><p>【强制】生产环境禁止使用hint，如sql_no_cache，force index，ignore key，straight join等。</p></li></ol><blockquote><p>因为hint是用来强制SQL按照某个执行计划来执行，但随着数据量变化我们无法保证自己当初的预判是正确的，因此我们要相信MySQL优化器！</p></blockquote><ol start="11"><li><p>【强制】where条件里等号左右字段类型必须一致，否则无法利用索引。</p></li><li><p>【建议】SELECT|UPDATE|DELETE|REPLACE要有WHERE子句，且WHERE子句的条件必需使用索引查找。</p></li><li><p>【强制】生产数据库中强烈不推荐大表上发生全表扫描，但对于100行以下的静态表可以全表扫描。查询数据量不要超过表行数的25%，否则不会利用索引。</p></li><li><p>【强制】WHERE 子句中禁止只使用全模糊的LIKE条件进行查找，必须有其他等值或范围查询条件，否则无法利用索引。</p></li><li><p>【建议】索引列不要使用函数或表达式，否则无法利用索引。如<code>where length(name)=’Admin’或where user_id+2=10023</code>。</p></li><li><p>【建议】减少使用or语句，可将or语句优化为union，然后在各个where条件上建立索引。如<code>where a=1 or b=2优化为where a=1… union …where b=2, key(a),key(b)</code></p></li><li><p>【建议】分页查询，当limit起点较高时，可先用过滤条件进行过滤。</p></li></ol><p>如<code>select a,b,c from t1 limit 10000,20;</code>优化为:</p><p>  <code>Select a,b,c from t1 where id&gt;10000 limit 20;</code></p><h3 id="多表连接"><a href="#多表连接" class="headerlink" title="多表连接"></a>多表连接</h3><ol><li>【强制】禁止跨db的join语句。</li></ol><p>因为这样可以减少模块间耦合，为数据库拆分奠定坚实基础。</p><ol start="2"><li><p>【强制】禁止在业务的更新类SQL语句中使用join，比如update t1 join t2…</p></li><li><p>【建议】不建议使用子查询，建议将子查询SQL拆开结合程序多次查询，或使用join来代替子查询。</p></li><li><p>【建议】线上环境，多表join不要超过3个表。</p></li><li><p>【建议】多表连接查询推荐使用别名，且SELECT列表中要用别名引用字段，数据库.表格式，如<code>“select a from db1.table1 alias1 where …”</code></p></li><li><p>【建议】在多表join中，尽量选取结果集较小的表作为驱动表，来join其他表。</p></li></ol><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><ol><li><p>【建议】事务中INSERT|UPDATE|DELETE|REPLACE语句操作的行数控制在2000以内，以及WHERE子句中IN列表的传参个数控制在500以内。</p></li><li><p>【建议】批量操作数据时，需要控制事务处理间隔时间，进行必要的sleep，一般建议值5-10秒。</p></li><li><p>【建议】对于有<code>auto_increment</code>属性字段的表的插入操作，并发需要控制在200以内。</p></li><li><p>【强制】程序设计必须考虑“数据库事务隔离级别”带来的影响，包括脏读、不可重复读和幻读。线上建议事务隔离级别为repeatable-read</p></li><li><p>【建议】事务里包含SQL不超过5个（支付业务除外），因为过长的事务会导致锁数据较久，MySQL内部缓存、连接消耗过多等雪崩问题。</p></li><li><p>【建议】事务里更新语句尽量基于主键或unique key，如update … where id=XX;否则会产生间隙锁，内部扩大锁定范围，导致系统性能下降，产生死锁。</p></li><li><p>【建议】尽量把一些典型外部调用移出事务，如调用webservice，访问文件存储等，从而避免事务过长。</p></li><li><p>【建议】对于MySQL主从延迟严格敏感的select语句，请开启事务强制访问主库。</p></li></ol><h3 id="排序和分组"><a href="#排序和分组" class="headerlink" title="排序和分组"></a>排序和分组</h3><ol><li><p>【建议】减少使用order by，和业务沟通能不排序就不排序，或将排序放到程序端去做。Order by、group by、distinct这些语句较为耗费CPU，数据库的CPU资源是极其宝贵的。</p></li><li><p>【建议】<code>order by、group by、distinct</code>这些SQL尽量利用索引直接检索出排序好的数据。如<code>where a=1 order by可以利用key(a,b)</code>。</p></li><li><p>【建议】包含了order by、group by、distinct这些查询的语句，where条件过滤出来的结果集请保持在1000行以内，否则SQL会很慢。</p></li></ol><h3 id="线上禁止使用的SQL语句"><a href="#线上禁止使用的SQL语句" class="headerlink" title="线上禁止使用的SQL语句"></a>线上禁止使用的SQL语句</h3><ol><li>【高危】禁用update|delete t1 … where a=XX limit XX; 这种带limit的更新语句。</li></ol><p>因为会导致主从不一致，导致数据错乱。建议加上order by PK</p><ol start="2"><li><p>【高危】禁止使用关联子查询，如<code>update t1 set … where name in(select name from user where…);</code>效率极其低下。</p></li><li><p>【强制】禁用procedure、function、trigger、views、event、外键约束。</p></li></ol><p>因为他们消耗数据库资源，降低数据库集群可扩展性。推荐都在程序端实现。</p><ol start="4"><li><p>【强制】禁用insert into …on duplicate key update… 在高并发环境下，会造成主从不一致。</p></li><li><p>【强制】禁止联表更新语句，如update t1,t2 where t1.id=t2.id…</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;规范背景与目的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;MySQL数据库与oracle、sqlserver等数据库相比，有其内核上的优势与劣势。我们在使用MySQL数据库的时候需要遵循一定规范，扬长避短。本规范旨在帮助或指导RD、QA、OP等技术
      
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>windows安装mysql-5.7压缩版</title>
    <link href="http://yoursite.com/2018/12/10/windows%E5%AE%89%E8%A3%85mysql-5-7%E5%8E%8B%E7%BC%A9%E7%89%88/"/>
    <id>http://yoursite.com/2018/12/10/windows安装mysql-5-7压缩版/</id>
    <published>2018-12-10T12:58:57.000Z</published>
    <updated>2018-12-10T13:06:29.235Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载mysql"><a href="#下载mysql" class="headerlink" title="下载mysql"></a>下载mysql</h2><ul><li>进入官网：<a href="https://www.mysql.com/" target="_blank" rel="noopener">https://www.mysql.com/</a></li><li>单击【Downloads】选项卡</li><li>最下面有个【MySQL Community Edition (GPL)】，单击【Community (GPL) Downloads »】</li><li>单击【MySQL Community Server (GPL)】下的【DOWNLOAD】</li><li>在弹出的页面上下载【Windows (x86, 64-bit), ZIP Archive】</li></ul><h2 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2><p><em>压缩包相当于免安装文件，要想使用它，需要配置正确，并通过服务来启动数据库服务。</em></p><h3 id="1-把压缩包解压到你喜欢的位置"><a href="#1-把压缩包解压到你喜欢的位置" class="headerlink" title="1.把压缩包解压到你喜欢的位置"></a>1.把压缩包解压到你喜欢的位置</h3><p>本示例解压到：D:\dprog\mysql\mysql-5.7.20-winx64，文件夹下</p><p>## </p><h3 id="2-创建my-ini文件，内容如下："><a href="#2-创建my-ini文件，内容如下：" class="headerlink" title="2.创建my.ini文件，内容如下："></a>2.创建my.ini文件，内容如下：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. [mysqld]  </span><br><span class="line">2. port=3306  </span><br><span class="line">3. basedir  ="D:\\dprog\\mysql\\mysql-5.7.20-winx64"  </span><br><span class="line">4. datadir  ="D:\\database\\"   </span><br><span class="line">5. max_allowed_packet = 32M</span><br></pre></td></tr></table></figure><p> <strong>注意</strong>，basedir和datadir是必须要配置的，basedir就是你解压的目录。官方文档上说，如果你喜欢用反斜杠，则要用双反斜杠，斜杠的话就不用这样。即：D:\dprog\mysql\mysql-5.7.20-winx64 或：D:/dprog/mysq/mysql-5.7.20-winx64</p><p>由于本人喜欢把数据库的数据文件独立出来，所以就把datadir配置到其它地方，方便管理。另外，创建该目录。</p><h3 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3.配置环境变量"></a>3.配置环境变量</h3><ul><li>添加一个名叫 <code>MYSQL_HOME</code> 的变量。</li><li>修改Path变量，在末尾添加 <code>%MYSQL_HOME%\bin</code> </li></ul><h3 id="4-安装mysql服务"><a href="#4-安装mysql服务" class="headerlink" title="4.安装mysql服务"></a>4.安装mysql服务</h3><ul><li>以管理员身份运行cmd，进入mysql的bin目录。</li><li>初始化数据库文件</li></ul><p><strong>[plain]</strong>  </p><ol><li><p><code>mysqld  --initialize</code>  </p><p>初始化成功后，会在datadir目录下生成一些文件，其中，<code>xxx.err</code>文件里说明了root账户的临时密码。那行大概长这样：</p></li></ol><p><strong>[plain]</strong>  </p><ol><li><code>2018-01-07T00:38:35.996881Z 1 [Note] A temporary password is generated for root@localhost: lgQS9kypu4&gt;j</code></li></ol><p>即密码是：<code>lgQS9kypu4&gt;j</code></p><ul><li>注册mysql服务</li></ul><p><strong>[html]</strong>  </p><p><code>mysqld -install MySQL</code></p><ul><li>启动mysql服务</li></ul><p><strong>[plain]</strong>  </p><p><code>net start MySQL</code></p><ul><li>修改root密码</li></ul><p>输入以下命令，回车，然后输入</p><p>上面</p><p>的默认密码：</p><p><strong>[sql]</strong>  </p><ol><li><code>mysql -u root -p</code></li></ol><p>进入MySQL命令行模式后，输入如下命令，命令中的 <strong>new_password</strong> 为root账号的新密码，请修改它。</p><p><strong>[sql]</strong>  </p><p><code>ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;new_password&#39;;</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;下载mysql&quot;&gt;&lt;a href=&quot;#下载mysql&quot; class=&quot;headerlink&quot; title=&quot;下载mysql&quot;&gt;&lt;/a&gt;下载mysql&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;进入官网：&lt;a href=&quot;https://www.mysql.com/&quot; target
      
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>linux下安装mysql</title>
    <link href="http://yoursite.com/2018/12/09/linux%E4%B8%8B%E5%AE%89%E8%A3%85mysql/"/>
    <id>http://yoursite.com/2018/12/09/linux下安装mysql/</id>
    <published>2018-12-08T21:44:44.000Z</published>
    <updated>2018-12-08T23:18:47.178Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、卸载掉原有mysql"><a href="#一、卸载掉原有mysql" class="headerlink" title="一、卸载掉原有mysql"></a>一、卸载掉原有mysql</h2><blockquote><p>图片为网络引用</p></blockquote><p># rpm -qa | grep mysql  // 这个命令就会查看该操作系统上是否已经安装了mysql数据库</p><p>有的话，我们就通过 <code>rpm -e</code> 命令 或者 <code>rpm -e --nodeps</code> 命令来卸载掉</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@xc ~]# rpm -e mysql　　// 普通删除模式</span><br><span class="line">[root@xc ~]# rpm -e --nodeps mysql　　// 强力删除模式，如果使用上面命令删除时，提示有依赖的其它文件，则用该命令可以对其进行强力删除</span><br></pre></td></tr></table></figure><p>在删除完以后我们可以通过 <code>rpm -qa | grep mysql</code> 命令来查看mysql是否已经卸载成功！！</p><h2 id="二、通过yum来进行mysql的安装"><a href="#二、通过yum来进行mysql的安装" class="headerlink" title="二、通过yum来进行mysql的安装"></a>二、通过yum来进行mysql的安装</h2><p>我是通过yum的方式来进行mysql的数据库安装，首先我们可以输入·<code>yum list | grep mysql</code> 命令来查看yum上提供的mysql数据库可下载的版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@xc ~]# yum list | grep mysql</span><br></pre></td></tr></table></figure><p>就可以得到yum服务器上mysql数据库的可下载版本信息：</p><p> <img src="/2018/12/09/linux下安装mysql/06234702-6db80283f59c4ad1a649f814d9cbd861.jpg" alt="1"></p><p>然后我们可以通过输入 <code>yum install -y mysql-server mysql mysql-devel</code> 命令将mysql mysql-server mysql-devel都安装好(<strong>注意:安装mysql时我们并不是安装了mysql客户端就相当于安装好了mysql数据库了，我们还需要安装mysql-server服务端才行</strong>)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@xc ~]# yum install -y mysql-server mysql mysql-deve</span><br></pre></td></tr></table></figure><p>在等待了一番时间后，yum会帮我们选择好安装mysql数据库所需要的软件以及其它附属的一些软件</p><p><img src="/2018/12/09/linux下安装mysql/06235302-218eb7ac0ae045319426b230c8bd4c1a.jpg" alt="2"></p><p>我们发现，通过yum方式安装mysql数据库省去了很多没必要的麻烦，当出现下面的结果时，就代表mysql数据库安装成功了</p><p> <img src="/2018/12/09/linux下安装mysql/06235745-91b403a8bb32407696f2a007c6a854a3.jpg" alt="3"></p><p>此时我们可以通过如下命令，查看刚安装好的mysql-server的版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@xc ~]# rpm -qi mysql-server</span><br></pre></td></tr></table></figure><p>我们安装的mysql-server并不是最新版本，如果你想尝试最新版本，那就去mysql官网下载rpm包安装就行了，至此我们的mysql数据库已经安装完成了。</p><h2 id="三、mysql数据库的初始化及相关配置"><a href="#三、mysql数据库的初始化及相关配置" class="headerlink" title="三、mysql数据库的初始化及相关配置"></a>三、mysql数据库的初始化及相关配置</h2><p>我们在安装完mysql数据库以后，会发现会多出一个mysqld的服务，这个就是咱们的数据库服务，我们通过输入 service mysqld start 命令就可以启动我们的mysql服务。</p><p><strong>注意</strong>：如果我们是第一次启动mysql服务，mysql服务器首先会进行初始化的配置，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">[root@xc ~]# service mysqld start</span><br><span class="line"></span><br><span class="line">初始化 MySQL 数据库： WARNING: The host &apos;xc&apos; could not be looked up with resolveip.</span><br><span class="line">This probably means that your libc libraries are not 100 % compatible</span><br><span class="line">with this binary MySQL version. The MySQL daemon, mysqld, should work</span><br><span class="line">normally with the exception that host name resolving will not work.</span><br><span class="line">This means that you should use IP addresses instead of hostnames</span><br><span class="line">when specifying MySQL privileges !</span><br><span class="line">Installing MySQL system tables...</span><br><span class="line">OK</span><br><span class="line">Filling help tables...</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">To start mysqld at boot time you have to copy</span><br><span class="line">support-files/mysql.server to the right place for your system</span><br><span class="line"></span><br><span class="line">PLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !</span><br><span class="line">To do so, start the server, then issue the following commands:</span><br><span class="line"></span><br><span class="line">/usr/bin/mysqladmin -u root password &apos;new-password&apos;</span><br><span class="line">/usr/bin/mysqladmin -u root -h xc password &apos;new-password&apos;</span><br><span class="line"></span><br><span class="line">Alternatively you can run:</span><br><span class="line">/usr/bin/mysql_secure_installation</span><br><span class="line"></span><br><span class="line">which will also give you the option of removing the test</span><br><span class="line">databases and anonymous user created by default.  This is</span><br><span class="line">strongly recommended for production servers.</span><br><span class="line"></span><br><span class="line">See the manual for more instructions.</span><br><span class="line"></span><br><span class="line">You can start the MySQL daemon with:</span><br><span class="line">cd /usr ; /usr/bin/mysqld_safe &amp;</span><br><span class="line"></span><br><span class="line">You can test the MySQL daemon with mysql-test-run.pl</span><br><span class="line">cd /usr/mysql-test ; perl mysql-test-run.pl</span><br><span class="line"></span><br><span class="line">Please report any problems with the /usr/bin/mysqlbug script!</span><br><span class="line"></span><br><span class="line">                                                           [确定]</span><br><span class="line">正在启动 mysqld：                                            [确定]</span><br></pre></td></tr></table></figure><p>这时我们会看到第一次启动mysql服务器以后会提示非常多的信息，目的就是对mysql数据库进行初始化操作，当我们再次重新启动mysql服务时，就不会提示这么多信息了，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@xc ~]# service mysqld restart</span><br><span class="line">停止 mysqld：                                             [确定]</span><br><span class="line">正在启动 mysqld：                                          [确定]</span><br></pre></td></tr></table></figure><p>我们在使用mysql数据库时，都得首先启动mysqld服务，我们可以 通过  <code>chkconfig --list | grep mysqld</code> 命令来查看mysql服务是不是开机自动启动，如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@xc ~]# chkconfig --list | grep mysqld</span><br><span class="line">mysqld             0:关闭    1:关闭    2:关闭    3:关闭    4:关闭    5:关闭    6:关闭</span><br></pre></td></tr></table></figure><p>我们发现mysqld服务并没有开机自动启动，我们当然可以通过 <code>chkconfig mysqld on</code> 命令来将其设置成开机启动，这样就不用每次都去手动启动了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@xc ~]# chkconfig mysqld on</span><br><span class="line">[root@xc ~]# chkconfig --list | grep mysql</span><br><span class="line">mysqld             0:关闭    1:关闭    2:启用    3:启用    4:启用    5:启用    6:关闭</span><br></pre></td></tr></table></figure><p>mysql数据库安装完以后只会有一个root管理员账号，但是此时的root账号还并没有为其设置密码，在第一次启动mysql服务时，会进行数据库的一些初始化工作，在输出的一大串信息中，我们看到有这样一行信息 ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/mysqladmin -u root password 'new-password'　　// 为root账号设置密码</span><br></pre></td></tr></table></figure><p>所以我们可以通过 该命令来给我们的root账号设置密码(<strong>注意</strong>：这个root账号是mysql的root账号，非Linux的root账号)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@xc ~]# mysqladmin -u root password 'root'　　// 通过该命令给root账号设置密码为 root</span><br></pre></td></tr></table></figure><p>此时我们就可以通过 <code>mysql -u root -p</code> 命令来登录我们的mysql数据库了</p><p> <img src="/2018/12/09/linux下安装mysql/blog\source\_posts\07003612-b31a56759e64417c84d85be6dfca5fbb.jpg" alt="img"></p><h2 id="四、mysql数据库的主要配置文件"><a href="#四、mysql数据库的主要配置文件" class="headerlink" title="四、mysql数据库的主要配置文件"></a>四、mysql数据库的主要配置文件</h2><p>1.<strong>/etc/my.cnf</strong> 这是mysql的主配置文件</p><p>我们可以查看一下这个文件的一些信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@xc etc]# ls my.cnf </span><br><span class="line">my.cnf</span><br><span class="line"></span><br><span class="line">[root@xc etc]# cat my.cnf </span><br><span class="line">[mysqld]</span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line">user=mysql</span><br><span class="line"></span><br><span class="line">\# skip-grant-tables</span><br><span class="line"></span><br><span class="line">\# Disabling symbolic-links is recommended to prevent assorted security risks</span><br><span class="line">symbolic-links=0</span><br><span class="line"></span><br><span class="line">[mysqld_safe]</span><br><span class="line">log-error=/var/log/mysqld.log</span><br><span class="line">pid-file=/var/run/mysqld/mysqld.pid</span><br></pre></td></tr></table></figure><p>2.<strong>/var/lib/mysql</strong>   mysql数据库的数据库文件存放位置</p><p>我们的mysql数据库的数据库文件通常是存放在了/ver/lib/mysql这个目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@xc ~]# cd /var/lib/mysql/</span><br><span class="line">[root@xc mysql]# ls -l</span><br><span class="line">总用量 20488</span><br><span class="line">-rw-rw----. 1 mysql mysql 10485760 4月   6 22:01 ibdata1</span><br><span class="line">-rw-rw----. 1 mysql mysql  5242880 4月   6 22:01 ib_logfile0</span><br><span class="line">-rw-rw----. 1 mysql mysql  5242880 4月   6 21:59 ib_logfile1</span><br><span class="line">drwx------. 2 mysql mysql     4096 4月   6 21:59 mysql　　// 这两个是mysql数据库安装时默认的两个数据库文件</span><br><span class="line">srwxrwxrwx. 1 mysql mysql        0 4月   6 22:01 mysql.sock</span><br><span class="line">drwx------. 2 mysql mysql     4096 4月   6 21:59 test　　// 这两个是mysql数据库安装时默认的两个数据库文件</span><br></pre></td></tr></table></figure><p>我们可以自己创建一个数据库，来验证一下该数据库文件的存放位置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">创建一个我们自己的数据库：</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> create database dbtest;</span></span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">[root@xc mysql]# ls -l</span><br><span class="line">总用量 20492</span><br><span class="line">-rw-rw----. 1 mysql mysql 10485760 4月   6 22:01 ibdata1</span><br><span class="line">-rw-rw----. 1 mysql mysql  5242880 4月   6 22:01 ib_logfile0</span><br><span class="line">-rw-rw----. 1 mysql mysql  5242880 4月   6 21:59 ib_logfile1</span><br><span class="line">drwx------. 2 mysql mysql     4096 4月   6 21:59 mysql</span><br><span class="line">srwxrwxrwx. 1 mysql mysql        0 4月   6 22:01 mysql.sock</span><br><span class="line">drwx------. 2 mysql mysql     4096 4月   6 21:59 test</span><br><span class="line">drwx------. 2 mysql mysql     4096 4月   6 22:15 dbtest　　// 这个就是我们刚自己创建的dbtest数据库</span><br><span class="line">[root@xc mysql]# cd dbtest/</span><br><span class="line">[root@xc xc]# ls</span><br><span class="line">db.opt</span><br></pre></td></tr></table></figure><p>3.<strong>/var/log</strong> mysql数据库的日志输出存放位置</p><p>我们的mysql数据库的一些日志输出存放位置都是在/var/log这个目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@xc xc]# cd </span><br><span class="line">[root@xc ~]# cd /var/log</span><br><span class="line">[root@xc log]# ls</span><br><span class="line">amanda                cron           maillog-20130331   spice-vdagent.log</span><br><span class="line">anaconda.ifcfg.log    cron-20130331  mcelog             spooler</span><br><span class="line">anaconda.log          cups           messages           spooler-20130331</span><br><span class="line">anaconda.program.log  dirsrv         messages-20130331  sssd</span><br><span class="line">anaconda.storage.log  dmesg          mysqld.log         tallylog</span><br><span class="line">anaconda.syslog       dmesg.old      ntpstats           tomcat6</span><br><span class="line">anaconda.xlog         dracut.log     piranha            wpa_supplicant.log</span><br><span class="line">anaconda.yum.log      gdm            pm-powersave.log   wtmp</span><br><span class="line">audit                 httpd          ppp                Xorg.0.log</span><br><span class="line">boot.log              ibacm.log      prelink            Xorg.0.log.old</span><br><span class="line">btmp                  lastlog        sa                 Xorg.1.log</span><br><span class="line">btmp-20130401         libvirt        samba              Xorg.2.log</span><br><span class="line">cluster               luci           secure             Xorg.9.log</span><br><span class="line">ConsoleKit            maillog        secure-20130331    yum.log</span><br></pre></td></tr></table></figure><p>其中mysqld.log 这个文件就是我们存放我们跟mysql数据库进行操作而产生的一些日志信息，通过查看该日志文件，我们可以从中获得很多信息</p><p>因为我们的mysql数据库是可以通过网络访问的，并不是一个单机版数据库，其中使用的协议是 tcp/ip 协议，我们都知道mysql数据库绑定的端口号是 3306 ，所以我们可以通过 <code>netstat -anp</code> 命令来查看一下，Linux系统是否在监听 3306 这个端口号：</p><p><img src="/2018/12/09/linux下安装mysql/07004518-a8b1e585e3e546c1a068d2a38d37b535.jpg" alt="4"></p><p>结果如上所示，Linux系统监听的3306端口号就是我们的mysql数据库！！！！</p><p>本篇随笔详细记录了在CentOS6.4下通过yum安装mysql数据库以及对数据库进行基本配置</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、卸载掉原有mysql&quot;&gt;&lt;a href=&quot;#一、卸载掉原有mysql&quot; class=&quot;headerlink&quot; title=&quot;一、卸载掉原有mysql&quot;&gt;&lt;/a&gt;一、卸载掉原有mysql&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;图片为网络引用&lt;/p&gt;
&lt;/blo
      
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人博客</title>
    <link href="http://yoursite.com/2018/12/08/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/12/08/Hexo搭建个人博客/</id>
    <published>2018-12-08T02:27:41.000Z</published>
    <updated>2018-12-10T12:39:41.594Z</updated>
    
    <content type="html"><![CDATA[<h4 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h4><blockquote><p>本篇讲的是如何用hexo和github pages 搭建静态网页博客，要用到的模块如下：</p><p><a href="http://hexo.io/" target="_blank" rel="noopener">hexo</a> 是一款快速、简单、并且强大的博客博客模板框架 - 基于nodejs 。</p><p><a href="http://github.com/" target="_blank" rel="noopener">github</a> 如果你是程序员 那么github就不说了。不了解的可以点击这里<a href="http://baike.baidu.com/view/3366456.htm?fr=aladdin" target="_blank" rel="noopener">github百度百科</a></p></blockquote><h2 id="1-安装-hexo-生成blog"><a href="#1-安装-hexo-生成blog" class="headerlink" title="1 安装 hexo 生成blog"></a>1 安装 hexo 生成blog</h2><h3 id="1-1-安装与简单发布"><a href="#1-1-安装与简单发布" class="headerlink" title="1.1 安装与简单发布"></a>1.1 安装与简单发布</h3><blockquote><p>需要提前安装nodejs, npm, git, 并且注册github</p><p><a href="https://jingyan.baidu.com/article/48b37f8dd141b41a646488bc.html" target="_blank" rel="noopener">nodejs 的安装与配置</a></p><p><a href="https://jingyan.baidu.com/article/a65957f4e91ccf24e77f9b11.html" target="_blank" rel="noopener">github的配置</a></p></blockquote><p>首先 , 我们要现在通过npm安装 hexo</p><p><code>$npm install hexo -g</code></p><p>安装好了之后 我们就可以初始化一个blog 并且启动服务器了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">mkdir blog</span></span><br><span class="line"><span class="meta">$</span><span class="bash"><span class="built_in">cd</span> blog</span></span><br><span class="line"><span class="meta">$</span><span class="bash">hexo init</span></span><br><span class="line"><span class="meta">$</span><span class="bash">npm install</span></span><br><span class="line"><span class="meta">$</span><span class="bash">hexo server</span></span><br></pre></td></tr></table></figure><p>此时文件目录为</p><ul><li>blog<ul><li>_config_yml // 注配置文件</li><li>db.json // 数据</li><li>debug.log // 调试日志</li><li>_node_mudules // nodejs 相关依赖</li><li>package.json // 配置依赖</li><li>scaffolds // 脚手架 - 也就是一个工具模板</li><li>source // 存放blog正文的地方</li><li>themes // 存放皮肤的地方</li></ul></li></ul><p>默认访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000</a></p><h3 id="1-2-新建文章"><a href="#1-2-新建文章" class="headerlink" title="1.2 新建文章"></a>1.2 新建文章</h3><p>当我们想写一篇blog时 在blog根目录下我们可以通过 hexo new <title> 指令来实现</title></p><p>例如我们想新建一篇主题为hello的blog</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">hexo new hello</span></span><br></pre></td></tr></table></figure><p>输出信息如下INFO:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Created: D:\blog\source\_posts\hello.md</span><br></pre></td></tr></table></figure><p>hexo会在 source/_posts/ 下新建hello.md 文件。</p><p>编辑 hello.md 就是编辑你的blog内容了 – <a href="http://www.ituring.com.cn/article/775" target="_blank" rel="noopener">markdown语法</a></p><p>hello.md 的文档和目录可以这样添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: hello</span><br><span class="line">date: 2018-12-07 22:28:16</span><br><span class="line">tags: </span><br><span class="line">  - tag1 </span><br><span class="line">  - tag2</span><br><span class="line">categories: category</span><br></pre></td></tr></table></figure><h3 id="1-3-静态处理"><a href="#1-3-静态处理" class="headerlink" title="1.3 静态处理"></a>1.3 静态处理</h3><p>因为我们的blog要部署到github静态服务器上面，所有我们还要将页面进行静态化</p><p>hexo 为我们提供了 hexo g 的方法。进入blog根目录 执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">hexo g</span></span><br></pre></td></tr></table></figure><p>会有一堆提示信息</p><p>blog根目录下会生成public文件夹-里面就是刚才生成的静态文件</p><h3 id="1-4-本地启动"><a href="#1-4-本地启动" class="headerlink" title="1.4 本地启动"></a>1.4 本地启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">hexo s --debug</span></span><br></pre></td></tr></table></figure><p>Hexo启动服务器的速度非常快，很快你就可以看到</p><blockquote><p>Hexo is running at <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>. Press Ctrl+C to stop.</p></blockquote><p>恭喜你，你的个人博客已经搭建成功了，接下来只要在浏览器输入<code>http://localhost:4000/</code>就可以在本地访问你的博客了。</p><p>这里使用<code>hexo s</code>也可以启动服务器，只不过加上<code>--debug</code>参数，如果运行中出错可以看到错误信息。</p><h3 id="1-5-关闭服务器"><a href="#1-5-关闭服务器" class="headerlink" title="1.5 关闭服务器"></a>1.5 关闭服务器</h3><p>要想关闭服务器，只需要在命令窗口按下<code>Ctrl+C</code>就可以了，这个组合键不仅仅用于关闭服务器，事实上你在cmd窗口中任何执行中的命令都可以用这个组合键来结束命令，只要连按两次该组合键就可以连输入Y或者N都不用。</p><h3 id="1-6-常用命令"><a href="#1-6-常用命令" class="headerlink" title="1.6 常用命令"></a>1.6 常用命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo new "postName"  #新建文章</span><br><span class="line">hexo new page "pageName" # 新建页面</span><br><span class="line">hexo generate # 生成静态页面至public目录</span><br><span class="line">hexo server # 启动服务器(默认端口4000，'ctrl+c'关闭server)</span><br><span class="line">hexo deploy # 项目部署</span><br><span class="line">hexo help # 查看帮助</span><br><span class="line">hexo version # 查看Hexo的版本</span><br><span class="line">hexo clean # 清除Hexo的缓存</span><br></pre></td></tr></table></figure><p>上边的一些命令可以使用简写</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>本地调试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s --debug</span><br></pre></td></tr></table></figure><p>远程部署</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>注：在使用部署命令时，需要先用npm安装 hexo-deployer-git 插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>hexo 的详细实用说明请参看<a href="http://hexo.io/docs/" target="_blank" rel="noopener">官方文档</a></p><h2 id="2-将blog部署到-github"><a href="#2-将blog部署到-github" class="headerlink" title="2 将blog部署到 github"></a>2 将blog部署到 github</h2><h3 id="2-1-安装插件"><a href="#2-1-安装插件" class="headerlink" title="2.1 安装插件"></a>2.1 安装插件</h3><p>想要将Hexo项目部署到 GitHub上，需要先安装一个插件。在Hexo项目的根目录打开命令窗口，输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">npm install hexo-deployer-git --save</span></span><br></pre></td></tr></table></figure><h3 id="2-2-建立github仓库"><a href="#2-2-建立github仓库" class="headerlink" title="2.2 建立github仓库"></a>2.2 建立github仓库</h3><hr><p>仓库的名字可以随便起，不过这个仓库是作为我们的博客仓库的，所以尽量将名字以 {username}.github.io 的形式来起。</p><p>比如，我的GitHub用户名是lewky，我就会把这个仓库命名为lewky.github.io, 这样我们才可以在浏览器直接用这个域名访问，不然的话，只能用 github.com/username/reponame 来访问。</p><h3 id="2-3部署到github"><a href="#2-3部署到github" class="headerlink" title="2.3部署到github"></a>2.3部署到github</h3><hr><p>部署到github 非常简单。因为hexo已经为你集成好了发布到github的配置。</p><p>我们只需要 修改 blog 目录下的 _config.yml 文件</p><p>打开 _config.yml 找到如下配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: git@github.com:/&#123;username&#125;/username.github.io.git</span><br><span class="line">branch: master</span><br><span class="line">message:</span><br></pre></td></tr></table></figure><p>注意，这里的仓库地址如果写成：<a href="https://github.com/{user}/{repository}.git可能会在后边的部署时无法成功，需要将https://github.com改成git@github.com:。" target="_blank" rel="noopener">https://github.com/{user}/{repository}.git可能会在后边的部署时无法成功，需要将https://github.com改成git@github.com:。</a></p><p>另外这里的branch和message可以不填，branch会默认是master分支</p><p>修改 {username}为你github的用户名</p><p>修改 repo : ‘your github repo’</p><p>回到 blog 目录 执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>或者静态和部署一起</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p>部署的前提是你已经做过git ssh key的填加</p><blockquote><p>github的使用请参考 <a href="https://jingyan.baidu.com/article/a65957f4e91ccf24e77f9b11.html" target="_blank" rel="noopener">百度经验</a></p></blockquote><p>你会发现public 目录下的页面已经发布到github了。</p><h2 id="3-安装插件"><a href="#3-安装插件" class="headerlink" title="3 安装插件"></a>3 安装插件</h2><h3 id="3-1-安装rss"><a href="#3-1-安装rss" class="headerlink" title="3.1 安装rss"></a>3.1 安装rss</h3><p><code>npm install hexo-generator-feed</code></p><p>启动服务器，用浏览器打开 <a href="http://localhost:4000/atom.xml%EF%BC%8C" target="_blank" rel="noopener">http://localhost:4000/atom.xml，</a> 就可以看到RSS已经生效了。</p><h3 id="3-2-填加评论"><a href="#3-2-填加评论" class="headerlink" title="3.2 填加评论"></a>3.2 填加评论</h3><p>使用来必力填加评论</p><ul><li>优势：</li></ul><blockquote><p>使用社交网站账户登录，免去注册过程。<br>提高用户的参与和沟通意愿。<br>管理/删除我的评论内容。<br>提供管理页面，管理网站文章及评论内容。</p></blockquote><ul><li>安装方法</li></ul><ol><li>在<a href="https://livere.com/" target="_blank" rel="noopener">来必力</a>的官网上注册账号。</li><li>在<a href="https://livere.com/insight/myCode" target="_blank" rel="noopener">此处</a>获取data-uid。</li><li>打开NexT主题的配置文件<code>—config</code>中，搜索livere_uid，将livere_uid前面的#号去掉，将id填写到livere_uid：后面</li></ol><h2 id="4-个性化"><a href="#4-个性化" class="headerlink" title="4 个性化"></a>4 个性化</h2><h3 id="4-1-个性设置"><a href="#4-1-个性设置" class="headerlink" title="4.1 个性设置"></a>4.1 个性设置</h3><p>打开配置文件，在博客根目录下的 _config.yaml 文件，找到如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Site</span></span><br><span class="line">title: Hexo</span><br><span class="line">subtitle:</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">author: John Doe</span><br><span class="line">language:</span><br><span class="line">timezone:</span><br></pre></td></tr></table></figure><p>说明：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Site</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 站点标题</span></span><br><span class="line">title: Hexo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 站点副标题</span></span><br><span class="line">subtitle:</span><br><span class="line"><span class="meta">#</span><span class="bash"> 站点描述</span></span><br><span class="line">description:</span><br><span class="line"><span class="meta">#</span><span class="bash"> 站点关键词</span></span><br><span class="line">keywords:</span><br><span class="line"><span class="meta">#</span><span class="bash"> 站点主人</span></span><br><span class="line">author: John Doe</span><br><span class="line"><span class="meta">#</span><span class="bash"> 站点语言</span></span><br><span class="line">language:</span><br><span class="line"><span class="meta">#</span><span class="bash"> 站点时区</span></span><br><span class="line">timezone:</span><br></pre></td></tr></table></figure><h3 id="4-2-安装主题"><a href="#4-2-安装主题" class="headerlink" title="4.2 安装主题"></a>4.2 安装主题</h3><p>Hexo有很多大佬开发的主题，很多人使用的是Next主题，该主题也确实挺简洁好看的，新版本的Next主题还可以选择四个主题。</p><p>那么怎么安装新的Hexo主题呢？ </p><p>在我们的Hexo项目路径下，可以看到有个 themes 文件夹，这个文件夹就是用于存放主题文件的。</p><h4 id="4-2-1-下载主题"><a href="#4-2-1-下载主题" class="headerlink" title="4.2.1 下载主题"></a>4.2.1 下载主题</h4><p>在blog根目录下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>接下来你会看到 themes 下多了个 next 文件夹，点进去你会看到个<code>.git*</code>文件夹，将该文件夹删掉，否则到时候你无法将整个完整的Hexo项目push到GitHub上。</p><h4 id="4-2-2-启用next主题"><a href="#4-2-2-启用next主题" class="headerlink" title="4.2.2 启用next主题"></a>4.2.2 启用next主题</h4><p>​    在Hexo项目中，有两个重要的配置文件 <code>_config.yml</code>；这两个配置文件一个在项目根目录下，一个在主题目录下。前者是站点配置文件，后者是主题配置文件，一个是Hexo项目的配置选项，一个是主题文件的配置选项。</p><p>​    打开站点配置文件，用Notepad++等编辑器打开文件。</p><p>在站点配置文件中，找到： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: landscape</span><br></pre></td></tr></table></figure><p>默认的博客主题就是这个，我们将其修改为next；这里的主题是指在 themes 文件夹下的对应主题的文件夹名字。</p><p><strong>注意，在配置文件中所有的属性的值，都必须和前边的 <code>:</code> 之间留一个空格。</strong>比如下边的写法就是错误的，不加上空格的话会出错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme:landscape</span><br></pre></td></tr></table></figure><h4 id="4-2-3-选择主题的外观"><a href="#4-2-3-选择主题的外观" class="headerlink" title="4.2.3 选择主题的外观"></a>4.2.3 选择主题的外观</h4><p>打开主题配置文件，找到下边的选项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Scheme Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># Schemes</span><br><span class="line">scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure><p>默认会使用Muse作为Next主题的外观，通过将某个scheme前边的<code>#</code>去掉来启动某个外观，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Scheme Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure><h4 id="4-2-4-验证新主题"><a href="#4-2-4-验证新主题" class="headerlink" title="4.2.4 验证新主题"></a>4.2.4 验证新主题</h4><p>依然是老操作——启动调试模式服务器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s --debug</span><br></pre></td></tr></table></figure><p>启动成功后，使用浏览器访问<a href="http://localhost:4000/" target="_blank" rel="noopener"><code>http://localhost:4000/</code></a>，看看博客能否访问成功。</p><h4 id="4-2-5-修改-Next-主题配置"><a href="#4-2-5-修改-Next-主题配置" class="headerlink" title="4.2.5 修改 Next 主题配置"></a>4.2.5 修改 Next 主题配置</h4><p>主题配置文件 <code>_config.yml</code> 位于 <code>themes\next</code> 之下。</p><h5 id="头像设置"><a href="#头像设置" class="headerlink" title="头像设置"></a>头像设置</h5><p>打开主题配置文件，找到如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 侧边栏头像</span><br><span class="line"># Sidebar Avatar</span><br><span class="line"># in theme directory(source/images): /images/avatar.gif</span><br><span class="line"># in site  directory(source/uploads): /uploads/avatar.gif</span><br><span class="line"># 头像的路径可以放在主题对应文件夹的source里，也可以放在站点根目录的source里，建议放在站点路径上</span><br><span class="line">#avatar: /images/avatar.gif</span><br></pre></td></tr></table></figure><p>将avatar前边的#去掉，接着配置图片的路径即可。</p><h5 id="网站图标"><a href="#网站图标" class="headerlink" title="网站图标"></a>网站图标</h5><p>打开主题配置文件，找到如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 将你的网站图标放到`&#123;站点根目录&#125;/source/` (推荐）或者`hexo-site/themes/next/source/images/`目录下</span><br><span class="line"># 默认的Next主题的网站图标放在`&#123;站点根目录&#125;/themes/next/source/images/`目录下</span><br><span class="line"># 如果你想将自己的网站图标放到`&#123;站点根目录&#125;/source/`根目录下，必须将`/images`从路径中去掉</span><br><span class="line"># 如果你将网站图标放到了`&#123;站点根目录&#125;/source/images`路径下，需要令网站图标的名字和`&#123;站点根目录&#125;/themes/next/source/images/`路径下的网站图标不同，否则网站图标会使用后者的同名图标</span><br><span class="line">favicon:</span><br><span class="line">  small: /images/favicon-16x16-next.png</span><br><span class="line">  medium: /images/favicon-32x32-next.png</span><br><span class="line">  apple_touch_icon: /images/apple-touch-icon-next.png</span><br><span class="line">  safari_pinned_tab: /images/logo.svg</span><br><span class="line">  #android_manifest: /images/manifest.json</span><br><span class="line">  #ms_browserconfig: /images/browserconfig.xml</span><br></pre></td></tr></table></figure><p>这里需要注意的是，网站图标一般是.ico或者.gif的类型，而且图标的大小一般只有几k而已，可以使用下边的网站制作个人的网站图标，建议先将原本的图标弄成正方形的。</p><blockquote><p><a href="http://www.bitbug.net/" target="_blank" rel="noopener">在线制作ico图标</a></p></blockquote><h5 id="菜单设置"><a href="#菜单设置" class="headerlink" title="菜单设置"></a>菜单设置</h5><p>打开主题配置文件，找到如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 如果该站点是运行在子目录之下（比如：domain.tld/blog；这里的blog就是指我们的博客，前边的是上一级的域名），需要将路径前的斜杠去掉（/archives -&gt; archives；即是将原本的绝对路径改成了相对路径）。</span><br><span class="line"># 用法：`Key：/link/ || 菜单图标`</span><br><span class="line"># Key就是菜单名，如果对该菜单名进行了国际化，即将其翻译放到对应的languages文件夹中，将会根据你设置的语言进行加载对应的菜单名翻译；如果没有设置翻译，则会使用这里的Key作为菜单名。这里的Key是大小写敏感的。</span><br><span class="line"># 在`||`分隔符之前的值是该菜单对应的路径</span><br><span class="line"># 在`||`分隔符之后的值是FontAwesome的图标（不懂的请百度什么是FontAwesome以及其用法），如果不指定图标，将会自动使用question这个图标。</span><br><span class="line"></span><br><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  #about: /about/ || user</span><br><span class="line">  #tags: /tags/ || tags</span><br><span class="line">  #categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br></pre></td></tr></table></figure><p>使用方法很简单，依然是将需要展示的菜单的前边的#去掉就行，更加具体的操作信息我已经在上边的注释中给出了。</p><h5 id="标签分类"><a href="#标签分类" class="headerlink" title="标签分类"></a>标签分类</h5><p>首先我们需要新建页面，在站点根目录打开命令窗口，分别输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo n page &quot;categories&quot;</span><br><span class="line">hexo n page &quot;tags&quot;</span><br><span class="line">hexo n page &quot;about&quot;</span><br></pre></td></tr></table></figure><p>接着你会发现在根目录的 source 目录下多出了上边的三个文件夹，里面各自有一个 index.md 文件。如果之前我们将menu里的categories，tags，about三个菜单解开了封印，那么在创建好这三个页面后就可以成功访问到，否则会报404请求错误。</p><h5 id="社交链接"><a href="#社交链接" class="headerlink" title="社交链接"></a>社交链接</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 如果不指定图标，会默认使用globe图标</span><br><span class="line">#social:</span><br><span class="line">  #GitHub: https://github.com/yourname || github</span><br><span class="line">  #E-Mail: mailto:yourname@gmail.com || envelope</span><br><span class="line">  #Google: https://plus.google.com/yourname || google</span><br><span class="line">  #Twitter: https://twitter.com/yourname || twitter</span><br><span class="line">  #FB Page: https://www.facebook.com/yourname || facebook</span><br><span class="line">  #VK Group: https://vk.com/yourname || vk</span><br><span class="line">  #StackOverflow: https://stackoverflow.com/yourname || stack-overflow</span><br><span class="line">  #YouTube: https://youtube.com/yourname || youtube</span><br><span class="line">  #Instagram: https://instagram.com/yourname || instagram</span><br><span class="line">  #Skype: skype:yourname?call|chat || skype</span><br></pre></td></tr></table></figure><p>老规矩，去掉#注释就可以启动。</p><h2 id="5-填加图片"><a href="#5-填加图片" class="headerlink" title="5 填加图片"></a>5 填加图片</h2><h3 id="5-1-准备"><a href="#5-1-准备" class="headerlink" title="5.1 准备"></a>5.1 准备</h3><ul><li><p>把主页配置文件<code>_config.yml</code> 里的<code>post_asset_folder:</code>这个选项设置为<code>true</code></p></li><li><p>在hexo目录下执行这样一句话<code>npm install hexo-asset-image --save</code>，这是下载安装一个可以上传本地图片的插件。</p></li><li><p>安装以后，再运行<code>hexo n &quot;xxxx&quot;</code>来生成md博文时，，<code>/source/_posts</code>文件夹内除了<code>xxxx.md</code>文件还有一个<strong>同名的文件夹</strong>，当然，你也可以选择自己建，这样就可以按需增加图片文件夹了，有需要就自己建个博客名的同名文件夹。</p></li></ul><h3 id="5-2-使用"><a href="#5-2-使用" class="headerlink" title="5.2 使用"></a>5.2 使用</h3><ul><li>在xxxx.md中想引入图片时，先把图片复制到xxxx这个文件夹中，然后只需要在xxxx.md中按照markdown的格式引入图片：<code>![你想输入的替代文字](xxxx/图片名.jpg)</code></li></ul><p><strong>注意</strong>： xxxx是这个md文件的名字，也是同名文件夹的名字。只需要有文件夹名字即可，不需要有什么绝对路径。你想引入的图片就只需要放入xxxx这个文件夹内就好了，很像引用相对路径。</p><ul><li>最后检查一下，<code>hexo g</code>生成页面后，进入public\2018\12\07\index.html文件中查看相关字段，可以发现，html标签内的语句是<code>&lt;img src=&quot;2018/12/07/xxxx/图片名.jpg&quot;&gt;</code>，而不是<code>&lt;img src=&quot;xxxx/图片名.jpg&gt;</code>。这很重要，关乎你的网页是否可以真正加载你想插入的图片。</li></ul><p>享受你的个人博客吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;本篇讲的是如何用hexo和github pages 搭建静态网页博客，要用到的模块如下：&lt;/p&gt;
&lt;p&gt;&lt;a hr
      
    
    </summary>
    
      <category term="博客" scheme="http://yoursite.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Node.js安装及环境配置之Windows篇</title>
    <link href="http://yoursite.com/2018/12/07/Node-js%E5%AE%89%E8%A3%85%E5%8F%8A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%B9%8BWindows%E7%AF%87/"/>
    <id>http://yoursite.com/2018/12/07/Node-js安装及环境配置之Windows篇/</id>
    <published>2018-12-07T14:28:16.000Z</published>
    <updated>2018-12-07T15:14:58.757Z</updated>
    
    <content type="html"><![CDATA[<h6 id="一、安装环境"><a href="#一、安装环境" class="headerlink" title="一、安装环境"></a>一、安装环境</h6><p>1、本机系统：Windows 10 home（64位）<br>2、Node.js：v10.14.1 LTS（64位）</p><h6 id="二、安装Node-js步骤"><a href="#二、安装Node-js步骤" class="headerlink" title="二、安装Node.js步骤"></a>二、安装Node.js步骤</h6><p>1、下载对应你系统的Node.js版本:<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a><br>2、选安装目录进行安装<br>3、环境配置<br>4、测试</p><h6 id="三、前期准备"><a href="#三、前期准备" class="headerlink" title="三、前期准备"></a>三、前期准备</h6><p>1、Node.js简介<br>简单的说 Node.js 就是运行在服务端的 JavaScript。Node.js 是一个基于 <a href="https://developers.google.com/v8/" target="_blank" rel="noopener">Chrome V8</a> 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 <a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm</a>，是全球最大的开源库生态系统。<br>2、下载Node.js<br>打开官网下载链接:<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a> 我这里下载的是node-v10.14.1-x64.msi</p><h6 id="四、开始安装"><a href="#四、开始安装" class="headerlink" title="四、开始安装"></a>四、开始安装</h6><p>1、下载完成后，双击“node-v10.14.1-x64.msi”，开始安装Node.js</p><p>至此Node.js已经安装完成，可以先进行下简单的测试安装是否成功了，后面还要进行环境配置<br>在键盘按下【win+R】键，输入cmd，然后回车，打开cmd窗口</p><blockquote><p>node -v</p><p>npm -v</p></blockquote><p>此处说明下：新版的Node.js已自带npm，安装Node.js时会一起安装，npm的作用就是对Node.js依赖的包进行管理，也可以理解为用来安装/卸载Node.js需要装的东西</p><h6 id="五、环境配置"><a href="#五、环境配置" class="headerlink" title="五、环境配置"></a>五、环境配置</h6><p>说明：这里的环境配置主要配置的是npm安装的全局模块所在的路径，以及缓存cache的路径，之所以要配置，是因为以后在执行类似：npm install express [-g] （后面的可选参数-g，g代表global全局安装的意思）的安装语句时，会将安装的模块安装到【C:\Users\用户名\AppData\Roaming\npm】路径中，占C盘空间。<br>例如：我希望将全模块所在路径和缓存路径放在我node.js安装的文件夹中，则在我安装的文件夹【D:\Dprog\nodejs】下创建两个文件夹【node_global】及【node_cache】</p><p>创建完两个空文件夹之后，打开cmd命令窗口，输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set prefix "D:\Develop\nodejs\node_global"</span><br><span class="line">npm config set cache "D:\Develop\nodejs\node_cache"</span><br></pre></td></tr></table></figure><p>接下来设置环境变量，关闭cmd窗口，“我的电脑”-右键-“属性”-“高级系统设置”-“高级”-“环境变量”</p><p>进入环境变量对话框，在【系统变量】下新建【NODE_PATH】，输入【D:\dprog\nodejs\node_global\node_modules】，将【用户变量】下的【Path】修改为【D:\dprog\nodejs\node_global】</p><h6 id="六、测试"><a href="#六、测试" class="headerlink" title="六、测试"></a>六、测试</h6><p>配置完后，安装个module测试下，我们就安装最常用的express模块，打开cmd窗口，<br>输入如下命令进行模块的全局安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express -g     # -g是全局安装的意思</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;一、安装环境&quot;&gt;&lt;a href=&quot;#一、安装环境&quot; class=&quot;headerlink&quot; title=&quot;一、安装环境&quot;&gt;&lt;/a&gt;一、安装环境&lt;/h6&gt;&lt;p&gt;1、本机系统：Windows 10 home（64位）&lt;br&gt;2、Node.js：v10.14.1 LTS（
      
    
    </summary>
    
      <category term="前端框架" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/12/07/hello-world/"/>
    <id>http://yoursite.com/2018/12/07/hello-world/</id>
    <published>2018-12-07T13:11:59.706Z</published>
    <updated>2018-12-07T13:11:59.707Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
